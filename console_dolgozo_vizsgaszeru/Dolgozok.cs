// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using console_dolgozo_vizsgaszeru;
//
//    var dolgozok = Dolgozok.FromJson(jsonString);

namespace console_dolgozo_vizsgaszeru
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Dolgozok
    {
        [JsonProperty("nev")]
        public string Nev { get; set; }

        [JsonProperty("neme")]
        public Neme Neme { get; set; }

        [JsonProperty("reszleg")]
        public string Reszleg { get; set; }

        [JsonProperty("belepesev")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Belepesev { get; set; }

        [JsonProperty("ber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Ber { get; set; }
    }

    public enum Neme { Férfi, Nő };

    public partial class Dolgozok
    {
        public static Dolgozok[] FromJson(string json) => JsonConvert.DeserializeObject<Dolgozok[]>(json, console_dolgozo_vizsgaszeru.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Dolgozok[] self) => JsonConvert.SerializeObject(self, console_dolgozo_vizsgaszeru.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NemeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class NemeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Neme) || t == typeof(Neme?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "férfi":
                    return Neme.Férfi;
                case "nő":
                    return Neme.Nő;
            }
            throw new Exception("Cannot unmarshal type Neme");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Neme)untypedValue;
            switch (value)
            {
                case Neme.Férfi:
                    serializer.Serialize(writer, "férfi");
                    return;
                case Neme.Nő:
                    serializer.Serialize(writer, "nő");
                    return;
            }
            throw new Exception("Cannot marshal type Neme");
        }

        public static readonly NemeConverter Singleton = new NemeConverter();
    }
}
